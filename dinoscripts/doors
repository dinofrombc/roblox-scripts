if not game:IsLoaded() then
    game.Loaded:Wait()
end

local player = game.Players.LocalPlayer
local lighting = game.Lighting
local runservice = game:service'RunService'
local inputservice = game:service'UserInputService'

local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local ws = 15
local fov = 80
local fovenabled = false
local clip = false
local fb = false
local fastinteract = false

local wsenabled = false
local safeseek = false

-- Infinite Jump
local infjump = false
local debounce = false
local cooldown = 0.1

local esp =
{
    ["door"] = false,
    ["key"] = false,
}

workspace.DescendantAdded:connect(function(child)
    if child:IsA("BasePart") then
        if child.Name == "Hitbox" and child.Parent.Name == "KeyObtain" and esp["key"] then
            local highlight = Instance.new("Highlight", child)
            highlight.Adornee = child
            highlight.Name = "Chams"
            highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
            highlight.FillColor = Color3.fromRGB(0, 255, 0)
        end

        if child.Name == "Door" and child.Parent.Name == "Door" and esp["door"] then
            local highlight = Instance.new("Highlight", child)
            highlight.Name = "Chams"
            highlight.Adornee = child
            highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
            highlight.FillColor = Color3.fromRGB(0, 0, 255)
        end
    end
end)

runservice.RenderStepped:connect(function()
    if workspace:FindFirstChild("SeekMoving") then if safeseek then wsenabled = false end end

    if fovenabled then workspace.CurrentCamera.FieldOfView = fov end

    if player.Character then
        local char = player.Character

        if clip then
            for _, part in pairs(char:GetDescendants()) do
                if part:IsA("BasePart") then
                    part.CanCollide = false
                end
            end
        end

        if wsenabled then char.Humanoid.WalkSpeed = ws end
        char.Humanoid.JumpPower = 50
    end

    if fb then
        lighting.Brightness = 2
        lighting.ClockTime = 14
        lighting.FogEnd = 100000
        lighting.GlobalShadows = false
        lighting.OutdoorAmbient = Color3.fromRGB(128, 128, 128)
    end
end)

local Window = Rayfield:CreateWindow({
    Name = "Dino Scripts - Doors",
    LoadingTitle = "Dino Scripts",
    LoadingSubtitle = "by dinofrombc",
    ConfigurationSaving = {
       Enabled = true,
       FolderName = "dinoscripts", -- Create a custom folder for your hub/game
       FileName = "doors"
    },
    Discord = {
       Enabled = false,
       Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD
       RememberJoins = true -- Set this to false to make them join the discord every time they load it up
    },
    KeySystem = false, -- Set this to true to use our key system
    KeySettings = {
       Title = "Untitled",
       Subtitle = "Key System",
       Note = "No method of obtaining the key is provided",
       FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
       SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
       GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
       Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
    }
 })

 local PlayerTab = Window:CreateTab("Player", 4483362458) -- Title, Image
 local VisualTab = Window:CreateTab("Visual", 4483362458) -- Title, Image
 local UtilityTab = Window:CreateTab("Utility", 4483362458) -- Title, Image

 PlayerTab:CreateToggle({
    Name = "Disable Speed on Seek",
    CurrentValue = true,
    Flag = "safeseek", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
    safeseek = Value
    end,
 })

 PlayerTab:CreateToggle({
    Name = "Enable Speed Boost",
    CurrentValue = false,
    Flag = "speedboost", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
    wsenabled = Value
    end,
 })

 PlayerTab:CreateSlider({
    Name = "WalkSpeed",
    Range = {0, 21},
    Increment = 1,
    Suffix = "Speed",
    CurrentValue = 15,
    Flag = "ws", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
    ws = Value
    end,
 })

 PlayerTab:CreateToggle({
    Name = "Enable FOV",
    CurrentValue = false,
    Flag = "fovtoggle", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
    fovenabled = Value
    end,
 })

 PlayerTab:CreateSlider({
    Name = "FOV",
    Range = {30, 120},
    Increment = 1,
    Suffix = "FOV",
    CurrentValue = 80,
    Flag = "fov", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
    fov = Value
    end,
 })

 PlayerTab:CreateToggle({
    Name = "Infinite Jump",
    CurrentValue = false,
    Flag = "infjump", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
    infjump = Value
    end,
 })

 PlayerTab:CreateToggle({
    Name = "Noclip (Buggy)",
    CurrentValue = false,
    Flag = "noclip", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
    clip = Value
    end,
 })

 VisualTab:CreateToggle({
    Name = "Fullbright",
    CurrentValue = false,
    Flag = "fb", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
    fb = Value
    end,
 })

 VisualTab:CreateToggle({
    Name = "Door ESP (Buggy)",
    CurrentValue = false,
    Flag = "dooresp", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
    esp["door"] = Value
    end,
 })

 VisualTab:CreateToggle({
    Name = "Key ESP (Buggy)",
    CurrentValue = false,
    Flag = "keyesp", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
    esp["key"] = Value
    end,
 })

 UtilityTab:CreateButton({
    Name = "Drop Items (OOF)",
    Callback = function()
    player.Character.Humanoid.Health = 0
    end,
 })

 inputservice.JumpRequest:connect(function()
    if not debounce and infjump then
        debounce = true

        player.Character.Humanoid:ChangeState("Jumping")

        task.wait(cooldown)

        debounce = false
    end
 end)

Rayfield:LoadConfiguration()
