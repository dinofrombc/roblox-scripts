local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local player = game.Players.LocalPlayer
local rs = game:service'RunService'

local ws = 16
local jp = 50
local god = false

function FindPlayer(name)
   local lowername = name:lower()

   if lowername == "me" then
      return player
   end

   if lowername == "random" then
      return game.Players:GetPlayers()[math.random(1, #game.Players:GetPlayers())]
   end

   for _, plr in pairs(game.Players:GetPlayers()) do
      if string.match(plr.Name, lowername) or string.match(plr.DisplayName, lowername) then
         return plr
      end
   end

   return nil
end

rs.RenderStepped:connect(function()
   if player.Character then
      if god then
         player.Character.Humanoid.Health = 100
      end
      player.Character.Humanoid.WalkSpeed = ws
      player.Character.Humanoid.JumpPower = jp
   end
end)

local Window = Rayfield:CreateWindow({
    Name = "Dino Hub - Universal",
    LoadingTitle = "Dino Hub",
    LoadingSubtitle = "by dinofrombc",
    ConfigurationSaving = {
       Enabled = true,
       FolderName = "dinohub", -- Create a custom folder for your hub/game
       FileName = "Universal"
    },
    Discord = {
       Enabled = false,
       Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD
       RememberJoins = true -- Set this to false to make them join the discord every time they load it up
    },
    KeySystem = false, -- Set this to true to use our key system
    KeySettings = {
       Title = "Untitled",
       Subtitle = "Key System",
       Note = "No method of obtaining the key is provided",
       FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
       SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
       GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
       Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
    }
 })

 local PlayerTab = Window:CreateTab("Player", 4483362458) -- Title, Image

 PlayerTab:CreateSlider({
   Name = "Speed Boost",
   Range = {0, 50},
   Increment = 1,
   Suffix = "",
   CurrentValue = 16,
   Flag = "ws", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
   ws = Value
   end,
})

PlayerTab:CreateSlider({
   Name = "Jump Boost",
   Range = {0, 100},
   Increment = 1,
   Suffix = "",
   CurrentValue = 50,
   Flag = "jp", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
   jp = Value
   end,
})

PlayerTab:CreateToggle({
   Name = "God Mode",
   CurrentValue = false,
   Flag = "god", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
   god = Value
   end,
})

local PlayerInput = PlayerTab:CreateInput({
   Name = "Teleport To",
   PlaceholderText = "Player Username",
   RemoveTextAfterFocusLost = false,
   Callback = function(Text)
   local plr = FindPlayer(Text)
   game:service'TweenService':Create(player.Character.HumanoidRootPart, TweenInfo.new(5, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut, 0, false, 0), { CFrame = plr.Character.HumanoidRootPart.CFrame })
   end,
})
